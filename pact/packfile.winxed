$include_const 'call_bits.pasm';

// Useful opcodes
inline get_iter(var obj) return var {
    var ret;
    ${ iter ret, obj };
    return ret;
}

class PACT.Packfile {
    // Constants
    var floats;  // RFA
    var pmcs;    // RPA
    var strings; // RSA

    // Root namespace
    var root; // Namespace

    // Main sub
    var main; // Subroutine

    // Opcode libraries
    var oplibs; // RPA of OpLibs

    // Header
    // Most header values can't really be changed, so aren't variables.
    var uuid_type; // Integer
    var uuid;      // String

    function Packfile() {
        self.floats    = new 'ResizableFloatArray';
        self.pmcs      = new 'ResizablePMCArray';
        self.strings   = new 'ResizableStringArray';
        self.root      = new PACT.Packfile.Namespace();
        self.main      = null;
        self.uuid_type = 0;
        self.uuid      = '';

        var oplibs  = new 'ResizablePMCArray';
        self.oplibs = oplibs;
        oplibs[0] = new 'OpLib'(var('core_ops'));
    }

    function set_uuid(int type, string uuid) {
        self.uuid_type = type;
        self.uuid      = uuid;
    }

    // Functions similar to PackfileView
}

namespace PACT.Packfile {
    class Namespace {
        var name;     // String
        var contents; // Hash

        // Should act hash-like
        function Namespace() {
            self.Namespace('');
        }

        function Namespace(string name) {
            self.name     = name;
            self.contents = {};
        }
    }

    class Constant {
        var value;
        var type;  // Integer, from call_bits

        function Constant(int value) {
            self.value = value;
            self.type  = PARROT_ARG_INTVAL;
        }

        function Constant(string value) {
            self.value = value;
            self.type  = PARROT_ARG_STRING;
        }

        function Constant(float value) {
            self.value = value;
            self.type  = PARROT_ARG_FLOATVAL;
        }

        function Constant(var value) {
            self.value = value;
            self.type  = PARROT_ARG_PMC;
        }

        function Constant(int type, var value) {
            self.type = type;
            switch (type) {
            case PARROT_ARG_INTVAL:
                self.value = int(value);
                break;

            case PARROT_ARG_STRING:
                self.value = string(value);
                break;

            case PARROT_ARG_FLOATVAL:
                self.value = float(value);
                break;

            case PARROT_ARG_PMC:
                self.value = value;
                break;

            default:
                die("Unknown type "+type);
            }
        }

        // set from all types?
    }

    namespace Constant {
        // A reference to something in the constants table
        class Reference : Constant {
            // uses value as an index into a table
            var packfile; // needs this for lookups

            // dereference
        }

        class Key : Constant {
            // value is an RPA used to build a Key PMC

            // convert to/from Key
        }
    }

    // Below are found in Namespace.contents

    class Subroutine {
        var name;      // String
        var ops;       // RPA
        
        // Stored by Sub PMC
        // visit:  namespace_name, multi_sig, outer_sub, lex_info
        // freeze: start/end offset, flags, name, method_name, ns_entry_name
        //    hll_name, comp_flags, vtable_index, registers, subid

        function Subroutine() {
            self.name = null;
            self.ops  = [];
        }
    }

    class Multi {
        var name;      // String
        var canidates; // RPA
    }

    // Below are in Subroutine.ops

    class Op {
        var name; // String
        var args; // RPA

        function Op(string name) {
            self.name = name;
            self.args = [];
        }
    }

    class Label {
        var name; // String

        function Label(string name) {
            self.name = name;
        }
    }

    class Register {
        var type;   // Integer, from call_bits
        var number; // Integer
    }

    class Annotation {
        var name;  // String
        var value; // Constant
        var pc;    // Integer
    }

    class Debug {
        var filename; // String
        var pc;       // Integer
    }
}
