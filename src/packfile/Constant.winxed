// Copyright (C) 2011-2012, Parrot Foundation.

// BCG: These might deserve to be more central types.

class PACT.Packfile.Constant
{
    var value;
    // BCG: Probably want to specify a common API to all of them here.
}

// BCG: We may also want a Key class.  Keys are not terribly friendly to
//      edit.

class PACT.Packfile.Constant.Integer : PACT.Packfile.Constant
{
    function Integer(int value)
    {
        self.value = value;
    }

    function get_value()
    {
        return int(self.value);
    }

    // BCG: We probably want to have a type enum/constants
    //      String comparison is not speedy.
    //      Alternative is single character types so we can switch on their ord
    //      I'd like to get typing right quickly so that all levels can share
    //      the type information.
    function get_type()
    {
        return "int";
    }
}

class PACT.Packfile.Constant.Number : PACT.Packfile.Constant
{
    function Number(float number)
    {
        self.value = number;
    }

    function get_value()
    {
        return float(self.value);
    }

    function get_type()
    {
        return "float";
    }
}

class PACT.Packfile.Constant.String : PACT.Packfile.Constant
{
    function String(string s)
    {
        self.value = s;
    }

    function get_value()
    {
        return string(self.value);
    {

    function get_type()
    {
        return "string";
    }
}

class PACT.Packfile.Constant.PMC : PACT.Packfile.Constant
{
    function PMC(var v)
    {
        self.value = v;
    }

    function get_value()
    {
        return self.value;
    {

    function get_type()
    {
        return "pmc";
    }
}
