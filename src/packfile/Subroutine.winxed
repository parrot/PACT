// Copyright (C) 2011-2012, Parrot Foundation.

class PACT.Packfile.Subroutine
{
    var program; // BCG: What is this?  The packfile?
    var ops;
    var name;
    var flags;
    var parent_namespace;
    var annotations;
    var identifier;

	// BCG: This feels like scope-like information that really
	//      belongs at levels higher than Packfile.
    var variables;
    var temp_variables;

    function Subroutine(var program, string name, var parent_ns)
    {
        self.program = program;
        self.parent_namespace = parent_ns;
        self.name = name;
        self.ops = [];
        self.flags = {};
        self.annotations = {};
        self.variables = {};
        self.temp_variables = [];
    }

    function add_flag(var flag)
    {
        string flag_name = flag.name();
        self.flags[flag_name] = flag;
    }

    function add_ops(var ops [slurpy])
    {
        for (var o in ops)
            push(self.ops, o);
    }

    function add_annotation(string name, string value)
    {
        self.annotations[name] = value;
    }

    function get_variable(string name, string type)
    {
        if (name != null && name != "") {
            if (exists self.variables[name])
                return self.variables[name];
        }
        var v;
        switch(type) {
            case "int":
                v = new PACT.Packfile.Variable.Integer();
                break;
            case "float":
                v = new PACT.Packfile.Variable.Number();
                break;
            case "string":
                v = new PACT.Packfile.Variable.String();
                break;
            case "pmc":
                v = new PACT.PAckfile.Variable.PMC();
                break;
            default:
                die("Unknown variable type " + type);
        }
        if (name == null || name == "")
            push(self.temp_variables, v);
        else {
            self.variables[name] = v;
            v.set_id(name);
        }
    }

    // BCG: These feel like they're in the wrong place.
    //      The subroutine doesn't have to care about constants.
    function get_constant(int i)
    {
        var c = new PACT.Packfile.Constant.Integer(i);
        self.program.add_constant(c);
        return c;
    }

    function get_constant(string s)
    {
        var c = new PACT.Packfile.Constant.String(s);
        self.program.add_constant(c);
        return c;
    }

    function get_constant(float n)
    {
        var c = new PACT.Packfile.Constant.Number(n);
        self.program.add_constant(c);
        return c;
    }

    function get_constant(var p)
    {
        var c = new PACT.Packfile.Constant.PMC(p);
        self.program.add_constant(c);
        return c;
    }

    // Get a value suitable to use with :subid
    function get_unique_identifier()
    {
        string id = self.identifier;
        if (id == null || id == "") {
            id = self.__internal_get_unique_id();
            self.identifier = id;
        }
        return id;
    }
}
